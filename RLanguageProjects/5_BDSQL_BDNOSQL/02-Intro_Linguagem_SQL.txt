# Introdução a Linguagem SQL 
# Usado no MySQL - 
# Instalação tips:


# Mostra todos os bancos de dados
show databases;


# Cria um banco de dados
CREATE DATABASE titanicDB;


# Habilita a sessão para o banco de dados
use titanicDB;


# Cria tabela
CREATE TABLE titanic (
	pclass		 char(3),
	survived		 char(1),   
	name		 varchar(100),
	sex			 char(6),
	age			 char(11),
	sibsp		 varchar(16),
	parch		 varchar(16),
	ticket		 varchar(20),		
	fare		 	 varchar(100),
	cabin		 varchar(16),
	embarked	 varchar(12),
	boat			 varchar(50),
	body		 varchar(32),
	home_dest	 varchar(200)
);	
	

# Carregar os dados do arquivo csv na tabela, usando o wizard.


# Instruções select
select name, age, sex, pclass from titanic where age > 70;
select name, age from titanic where age > 70;
select pclass, survived, avg(age) as media from titanic group by pclass, survived;


# Cria outro banco de dados
CREATE DATABASE cadastroDB;


# Habilita a sessão para o banco de dados
use cadastroDB;


# Cria tabela
CREATE TABLE FUNCIONARIOS(
   ID   INT              NOT NULL, #not null restrição de integridade
   NOME VARCHAR (20)     NOT NULL,
   IDADE  INT              NOT NULL,
   CIDADE  CHAR (25) ,
   SALARIO   DECIMAL (18, 2),  #18 posições antes da casa decimal     
   PRIMARY KEY (ID)
);


# Descreve a tabela
DESC FUNCIONARIOS;

# Instruções insert - carregando registros na tabela com código
INSERT INTO FUNCIONARIOS (ID,NOME,IDADE,CIDADE,SALARIO)
VALUES (1, 'Pele', 32, 'Roma', 2000.00 );

INSERT INTO FUNCIONARIOS (ID,NOME,IDADE,CIDADE,SALARIO)
VALUES (2, 'Zico', 25, 'Paris', 1500.00 );

INSERT INTO FUNCIONARIOS (ID,NOME,IDADE,CIDADE,SALARIO)
VALUES (3, 'Rivelino', 23, 'Santiago', 4000.00 );

INSERT INTO FUNCIONARIOS (ID,NOME,IDADE,CIDADE,SALARIO)
VALUES (4, 'Garrincha', 25, 'Vienna', 6500.00 );

INSERT INTO FUNCIONARIOS (ID,NOME,IDADE,CIDADE,SALARIO)
VALUES (5, 'Jair', 64, 'Vienna', 7800.00 );

# Esse registro gera erro de duplicidade, ID 5 2 vezes em PK!
INSERT INTO FUNCIONARIOS (ID,NOME,IDADE,CIDADE,SALARIO)
VALUES (5, 'Careca', 25, 'Milao', 8900.00 );

INSERT INTO FUNCIONARIOS (ID,NOME,IDADE,CIDADE,SALARIO)
VALUES (6, 'Careca', 25, 'Milao', 8900.00 );


# Instruções select
select * from FUNCIONARIOS;

select nome, salario from FUNCIONARIOS;

SELECT ID, NOME, SALARIO 
FROM FUNCIONARIOS
WHERE SALARIO > 2000;


SELECT ID, NOME, SALARIO 
FROM FUNCIONARIOS
WHERE NOME = 'Zico';


SELECT ID, NOME, SALARIO 
FROM FUNCIONARIOS
WHERE SALARIO > 2000 AND IDADE < 55;


# Instrução Update - CUIDADO
UPDATE FUNCIONARIOS
SET cidade = 'Boston'
WHERE ID = 6; # cuidado se não colocar o filtro, ele atualiza tudoooo!


# Instrução Delete (from "Nome da tabela")
DELETE FROM FUNCIONARIOS
WHERE ID = 6;


# Instruções select
select distinct cidade from FUNCIONARIOS; #traz valores unicos

select count(*) from FUNCIONARIOS; # contar

select cidade, sum(salario) from FUNCIONARIOS group by cidade; #somou se tiver cidade repetida

select cidade, sum(salario) from FUNCIONARIOS group by cidade having sum(salario) > 2000; # filtra pelo agrupamento


# Cria índice - caminho para chegar onde a query quer.
# importante pq qdo faz uma pesquisa, o SGBD cria o plano de execução não precisar fazer full table scan
# com o indice o execution plan faz um full index scan
create index cidade_idx on FUNCIONARIOS(cidade);


# Mostra os índices
SHOW INDEX FROM funcionarios;
# já tinha um indice que foi criado pelo banco qdo criamos a PK
# criamos um 2º indice cidade

# Cria uma tabela a partir de outra tabela
# sempre que mexer numa tabela, FAÇA BACKUP antes
# o comando SELECT TABLE recebe ums instrução SELECT para criar a tabela de backup
create table funcionarios_bkp 
as select * from funcionarios;

select * from funcionarios_bkp;


# Remove a tabela
drop table funcionarios_bkp;


# Remove o banco de dados
drop database titanicDB;
drop database cadastroDB;






